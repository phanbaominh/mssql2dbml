const P = require('parsimmon');
const { keyword, word } = require('./base_utils');

const Lang = P.createLanguage({
  KeywordIdendity: () => keyword(/IDENDITY/i),
  KeywordIndex: () => keyword(/INDEX/i),
  KeywordWith: () => keyword(/WITH/i),
  KeywordOn: () => keyword(/ON/i),
  KeywordOff: () => keyword(/OFF/i),
  KeywordFilestream_On: () => keyword(/FILESTREAM_ON/i),
  KeywordPrimaryKey: () => keyword(/PRIMARY[^\S\r\n]+KEY/i),
  KeywordClustered: () => keyword(/CLUSTERED/i),
  KeywordNonclustered: () => keyword(/NONCLUSTERED/i),
  KeywordReferences: () => keyword(/REFERENCES/i),
  KeywordForeignKey: () => keyword(/FOREIGN[^\S\r\n]+KEY/i),
  KeywordCheck: () => keyword(/CHECK/i),
  KeywordConstraint: () => keyword(/CONSTRAINT/i),
  KeywordUnique: () => keyword(/UNIQUE/i),
  KeywordHash: () => keyword(/HASH/i),
  KeywordBucket_Count: () => keyword(/BUCKET_COUNT/i),
  KeywordNFR: () => keyword(/NOT[^\S\r\n]+FOR[^\S\r\n]+REPLICATION/),
  KeywordOnDelete: () => keyword(/ON[^\S\r\n]+DELETE/i),
  KeywordOnUpdate: () => keyword(/ON[^\S\r\n]+UPDATE/i),
  KeywordSetNull: () => keyword(/SET[^\S\r\n]+NULL/i),
  KeywordSetDefault: () => keyword(/SET[^\S\r\n]+DEFAULT/i),
  KeywordNoAction: () => keyword(/NO[^\S\r\n]+ACTION/i),
  KeywordCascade: () => keyword(/CASCADE/i),
  KeywordContent: () => keyword(/CONTENT/i),
  KeywordDocument: () => keyword(/DOCUMENT/i),
  KeywordNull: () => keyword(/NULL/i),
  KeywordNotNull: () => keyword(/NOT[^\S\r\n]+NULL/i),
  KeywordDefault: () => keyword(/DEFAULT/i),
  KeywordFilestream: () => keyword(/FILESTREAM/i),
  KeywordCollate: () => keyword(/COLLATE/i),
  KeywordSparse: () => keyword(/SPARSE/i),
  KeywordRowGUIDCol: () => keyword(/ROWGUIDCOL/i),
  KeywordMasked: () => keyword(/MASKED/i),
  KeywordEncrypted: () => keyword(/ENCRYPTED/i),
  KeywordFunction: () => keyword(/FUNCTION/i),
  KeywordGeneratedAAR: () => keyword(/GENERATED ALWAYS AS ROW/i),
  KeywordStart: () => keyword(/START/i),
  KeywordEnd: () => keyword(/END/i),
  KeywordHidden: () => keyword(/HIDDEN/i),

  LogicalOpIn: () => keyword(/IN/i, true),

  LessThan: () => word('<'),
  GreaterThan: () => word('>'),
  LParen: () => word('('),
  Comma: () => word(','),
  RParen: () => word(')'),
  DoubleQuote: () => word('"'),
  LBracket: () => word('['),
  RBracket: () => word(']'),
  Equal: () => word('='),
});

module.exports = Lang;
